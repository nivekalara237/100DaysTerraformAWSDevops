AWSTemplateFormatVersion: "2010-09-09"
Description: "S3 - lambda - DynamoDb (event trigger)"
Parameters:
  PicturesBucketName:
    Type: String
    Default: "pictures-cfn-09js9d0b8dz00zej"
  ThumbnailsBucketName:
    Type: String
    Default: "thumbnails-pictures-cfn-09js9d0b8dz00zej"
Resources:
  ## --- IAM Role & Policy
  LambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: Allow-lambda-logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectAcl
                Resource:
                  - !Join [ '', [ "arn:aws:s3:::", !Ref PicturesBucketName, '/*' ] ]
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Join [ '', [ "arn:aws:s3:::", !Ref ThumbnailsBucketName, '/*' ] ]
        - PolicyName: allow-lambda-dynamodb
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt PicturesTables.Arn
                  - !GetAtt ThumbnailsTables.Arn

  ## --- Dynamodb Tables
  PicturesTables:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "PicturesTable"
      BillingMode: "PAY_PER_REQUEST"
      TableClass: "STANDARD"
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
        - AttributeName: ObjectKey
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
        - AttributeName: ObjectKey
          AttributeType: S
      Tags:
        - Key: Name
          Value: "dynamodb:PictureTable"
  ThumbnailsTables:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "ThumbnailsTables"
      BillingMode: "PAY_PER_REQUEST"
      TableClass: "STANDARD"
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
        - AttributeName: ObjectKey
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
        - AttributeName: ObjectKey
          AttributeType: S
      Tags:
        - Key: Name
          Value: "dynamodb:PictureTable"

  ## --- Buckets
  PictureBucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - S3PermissionToInvokeFunction
      - PerformingImageFunction
    Properties:
      BucketName: !Ref PicturesBucketName
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt PerformingImageFunction.Arn
            Event: s3:ObjectCreated:*
      Tags:
        - Key: Name
          Value: 's3:PicturesBucket'
  ThumbnailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ThumbnailsBucketName
      ObjectLockEnabled: false
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: 's3:ThumbnailsPicturesBucket'

  ## --- Lambda function

  PerformingImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Role: !GetAtt LambdaExecRole.Arn
      Code:
        ZipFile: |
          const {GetObjectCommand, PutObjectCommand, S3Client} = require("@aws-sdk/client-s3");
          const sharp = require("sharp");
          const {DynamoDBClient} = require("@aws-sdk/client-dynamodb");
          const {DynamoDBDocumentClient, PutCommand} = require("@aws-sdk/lib-dynamodb");
          const UUID = require("uuid");

          const region = process.env.REGION;
          const thumbsDestBucket = process.env.THUMBS_BUCKET_NAME;
          const picturesTableName = process.env.DYNAMODB_PICTURES_TABLE_NAME;
          const thumbnailsTableName = process.env.DYNAMODB_THUMBNAILS_PICTURES_TABLE_NAME;
          const s3Client = new S3Client({
              reqion: region,
          });

          const dynClient = new DynamoDBClient({
              region: region,
          });
          const documentClient = DynamoDBDocumentClient.from(dynClient);

          const handler = async function (event, context) {
              const bucket = event.Records[0].s3.bucket.name;
              const objKey = decodeURIComponent(event.Records[0].s3.object.key.replace("/\+/g", " "));
              try {
                  const originalObject = await s3Client.send(new GetObjectCommand({
                      Bucket: bucket,
                      Key: objKey
                  }));
                  console.log("Get S3 Object: [OK]");
                  const imageBody = await originalObject.Body.transformToByteArray();
                  const thumbs = await sharp(imageBody)
                      .resize(128)
                      .png()
                      .toBuffer();
                  console.log("Image resized: [OK]");
                  await s3Client.send(new PutObjectCommand({
                      Bucket: thumbsDestBucket,
                      Key: objKey,
                      Body: thumbs
                  }));
                  console.log("Put resized image into S3 bucket: [OK]");
                  const itemPictureCommand = new PutCommand({
                      TableName: picturesTableName,
                      Item: {
                          ID: UUID(),
                          ObjectKey: objKey,
                          BucketName: bucket,
                          Region: region,
                          CreatedAt: new Date().getTime(),
                          FileSize: event.Records[0].s3.object.size
                      }
                  });

                  await documentClient.send(itemPictureCommand);

                  console.log("Put original metadata into DynamoDB Table: [OK]");

                  const itemThumbCommand = new PutCommand({
                      TableName: thumbnailsTableName,
                      Item: {
                          ID: UUID(),
                          ObjectKey: objKey,
                          BucketName: thumbsDestBucket,
                          Region: region,
                          CreatedAt: new Date().getTime(),
                          FileSize: thumbs.byteLength
                      }
                  });

                  await documentClient.send(itemThumbCommand);
                  console.log("Put resized metadata into DynamoDB Table: [OK]");

                  return {
                      statusCode: 200,
                      body: JSON.stringify({
                          object: `${bucket}/${objKey}`,
                          thumbs: `${thumbsDestBucket}/${objKey}`
                      })
                  };
              } catch (e) {
                  console.error(e);
                  return {
                      statusCode: 500,
                      body: JSON.stringify(e)
                  };
              }
          };

          module.exports = handler
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          TRIGGER_BUCKET_NAME: !Ref PicturesBucketName
          THUMBS_BUCKET_NAME: !Ref ThumbnailsBucketName
          REGION: !Ref AWS::Region
          DYNAMODB_THUMBNAILS_PICTURES_TABLE_NAME: !Ref ThumbnailsTables
          DYNAMODB_PICTURES_TABLE_NAME: !Ref PicturesTables
      Tags:
        - Key: Name
          Value: lambda:PerformingImageFunction

  S3PermissionToInvokeFunction:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PerformingImageFunction
      Action: "lambda:InvokeFunction"
      Principal: "s3.amazonaws.com"
      SourceArn: !Sub "arn:aws:s3:::${PicturesBucketName}"
      SourceAccount: !Ref AWS::AccountId
